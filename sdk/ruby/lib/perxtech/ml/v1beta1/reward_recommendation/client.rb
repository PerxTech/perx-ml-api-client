# frozen_string_literal: true

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "gapic/common"
require "gapic/config"
require "gapic/config/method"

require "google/cloud/errors"
require "perxtech/ml/version"
require "perxtech/ml/v1beta1/reward_recommendation_pb"
require "perxtech/ml/v1beta1/reward_recommendation/credentials"

module Perxtech
  module Ml
    module V1beta1
      module RewardRecommendation
        ##
        # Client for the RewardRecommendation service.
        #
        class Client
          # @private
          attr_reader :reward_recommendation_stub

          ##
          # Configure the RewardRecommendation Client class.
          #
          # See {Perxtech::Ml::V1beta1::RewardRecommendation::Client::Configuration}
          # for a description of the configuration fields.
          #
          # ## Example
          #
          # To modify the configuration for all RewardRecommendation clients:
          #
          #     Perxtech::Ml::V1beta1::RewardRecommendation::Client.configure do |config|
          #       config.timeout = 10_000
          #     end
          #
          # @yield [config] Configure the Client client.
          # @yieldparam config [Client::Configuration]
          #
          # @return [Client::Configuration]
          #
          def self.configure
            @configure ||= begin
              namespace = ["Perxtech", "Ml", "V1beta1"]
              parent_config = while namespace.any?
                                parent_name = namespace.join "::"
                                parent_const = const_get parent_name
                                break parent_const.configure if parent_const&.respond_to? :configure
                                namespace.pop
                              end
              default_config = Client::Configuration.new parent_config

              default_config
            end
            yield @configure if block_given?
            @configure
          end

          ##
          # Configure the RewardRecommendation Client instance.
          #
          # The configuration is set to the derived mode, meaning that values can be changed,
          # but structural changes (adding new fields, etc.) are not allowed. Structural changes
          # should be made on {Client.configure}.
          #
          # See {Perxtech::Ml::V1beta1::RewardRecommendation::Client::Configuration}
          # for a description of the configuration fields.
          #
          # @yield [config] Configure the Client client.
          # @yieldparam config [Client::Configuration]
          #
          # @return [Client::Configuration]
          #
          def configure
            yield @config if block_given?
            @config
          end

          ##
          # Create a new RewardRecommendation client object.
          #
          # ## Examples
          #
          # To create a new RewardRecommendation client with the default
          # configuration:
          #
          #     client = Perxtech::Ml::V1beta1::RewardRecommendation::Client.new
          #
          # To create a new RewardRecommendation client with a custom
          # configuration:
          #
          #     client = Perxtech::Ml::V1beta1::RewardRecommendation::Client.new do |config|
          #       config.timeout = 10_000
          #     end
          #
          # @yield [config] Configure the RewardRecommendation client.
          # @yieldparam config [Client::Configuration]
          #
          def initialize
            # These require statements are intentionally placed here to initialize
            # the gRPC module only when it's required.
            # See https://github.com/googleapis/toolkit/issues/446
            require "gapic/grpc"
            require "perxtech/ml/v1beta1/reward_recommendation_services_pb"

            # Create the configuration object
            @config = Configuration.new Client.configure

            # Yield the configuration if needed
            yield @config if block_given?

            # Create credentials
            credentials = @config.credentials
            credentials ||= Credentials.default scope: @config.scope
            if credentials.is_a?(String) || credentials.is_a?(Hash)
              credentials = Credentials.new credentials, scope: @config.scope
            end
            @quota_project_id = credentials.respond_to?(:quota_project_id) ? credentials.quota_project_id : nil

            @reward_recommendation_stub = Gapic::ServiceStub.new(
              Perxtech::Ml::V1beta1::RewardRecommendation::Stub,
              credentials:  credentials,
              endpoint:     @config.endpoint,
              channel_args: @config.channel_args,
              interceptors: @config.interceptors
            )
          end

          # Service calls

          ##
          # @overload get_recommendation(request, options = nil)
          #   @param request [Perxtech::Ml::V1beta1::GetRewardRecommendationRequest | Hash]
          #   @param options [Gapic::CallOptions, Hash]
          #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
          #
          # @overload get_recommendation(tenant: nil, user_id: nil, reward_ids: nil, limit: nil)
          #   @param tenant [String]
          #   @param user_id [String]
          #   @param reward_ids [Array<String>]
          #   @param limit [Integer]
          #
          #
          # @yield [response, operation] Access the result along with the RPC operation
          # @yieldparam response [Perxtech::Ml::V1beta1::RewardRecommendationResponse]
          # @yieldparam operation [GRPC::ActiveCall::Operation]
          #
          # @return [Perxtech::Ml::V1beta1::RewardRecommendationResponse]
          #
          # @raise [Google::Cloud::Error] if the RPC is aborted.
          #
          def get_recommendation request, options = nil
            raise ArgumentError, "request must be provided" if request.nil?

            request = Gapic::Protobuf.coerce request, to: Perxtech::Ml::V1beta1::GetRewardRecommendationRequest

            # Converts hash and nil to an options object
            options = Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

            # Customize the options with defaults
            metadata = @config.rpcs.get_recommendation.metadata.to_h

            # Set x-goog-api-client and x-goog-user-project headers
            metadata[:"x-goog-api-client"] ||= Gapic::Headers.x_goog_api_client \
              lib_name: @config.lib_name, lib_version: @config.lib_version,
              gapic_version: ::Perxtech::Ml::VERSION
            metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

            options.apply_defaults timeout:      @config.rpcs.get_recommendation.timeout,
                                   metadata:     metadata,
                                   retry_policy: @config.rpcs.get_recommendation.retry_policy
            options.apply_defaults metadata:     @config.metadata,
                                   retry_policy: @config.retry_policy

            @reward_recommendation_stub.call_rpc :get_recommendation, request, options: options do |response, operation|
              yield response, operation if block_given?
              return response
            end
          rescue GRPC::BadStatus => e
            raise Google::Cloud::Error.from_error(e)
          end

          ##
          # Configuration class for the RewardRecommendation API.
          #
          # This class represents the configuration for RewardRecommendation,
          # providing control over timeouts, retry behavior, logging, transport
          # parameters, and other low-level controls. Certain parameters can also be
          # applied individually to specific RPCs. See
          # {Perxtech::Ml::V1beta1::RewardRecommendation::Client::Configuration::Rpcs}
          # for a list of RPCs that can be configured independently.
          #
          # Configuration can be applied globally to all clients, or to a single client
          # on construction.
          #
          # # Examples
          #
          # To modify the global config, setting the timeout for get_recommendation
          # to 20 seconds, and all remaining timeouts to 10 seconds:
          #
          #     Perxtech::Ml::V1beta1::RewardRecommendation::Client.configure do |config|
          #       config.timeout = 10_000
          #       config.rpcs.get_recommendation.timeout = 20_000
          #     end
          #
          # To apply the above configuration only to a new client:
          #
          #     client = Perxtech::Ml::V1beta1::RewardRecommendation::Client.new do |config|
          #       config.timeout = 10_000
          #       config.rpcs.get_recommendation.timeout = 20_000
          #     end
          #
          # @!attribute [rw] endpoint
          #   The hostname or hostname:port of the service endpoint.
          #   Defaults to `"ml-api.data.perxtech.net"`.
          #   @return [String]
          # @!attribute [rw] credentials
          #   Credentials to send with calls. You may provide any of the following types:
          #    *  (`String`) The path to a service account key file in JSON format
          #    *  (`Hash`) A service account key as a Hash
          #    *  (`Google::Auth::Credentials`) A googleauth credentials object
          #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
          #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
          #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
          #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
          #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
          #    *  (`nil`) indicating no credentials
          #   @return [Object]
          # @!attribute [rw] scope
          #   The OAuth scopes
          #   @return [Array<String>]
          # @!attribute [rw] lib_name
          #   The library name as recorded in instrumentation and logging
          #   @return [String]
          # @!attribute [rw] lib_version
          #   The library version as recorded in instrumentation and logging
          #   @return [String]
          # @!attribute [rw] channel_args
          #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
          #   `GRPC::Core::Channel` object is provided as the credential.
          #   @return [Hash]
          # @!attribute [rw] interceptors
          #   An array of interceptors that are run before calls are executed.
          #   @return [Array<GRPC::ClientInterceptor>]
          # @!attribute [rw] timeout
          #   The call timeout in milliseconds.
          #   @return [Numeric]
          # @!attribute [rw] metadata
          #   Additional gRPC headers to be sent with the call.
          #   @return [Hash{Symbol=>String}]
          # @!attribute [rw] retry_policy
          #   The retry policy. The value is a hash with the following keys:
          #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
          #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
          #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
          #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
          #       trigger a retry.
          #   @return [Hash]
          #
          class Configuration
            extend Gapic::Config

            config_attr :endpoint,     "ml-api.data.perxtech.net", String
            config_attr :credentials,  nil do |value|
              allowed = [::String, ::Hash, ::Proc, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
              allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
              allowed.any? { |klass| klass === value }
            end
            config_attr :scope,        nil, String, Array, nil
            config_attr :lib_name,     nil, String, nil
            config_attr :lib_version,  nil, String, nil
            config_attr(:channel_args, { "grpc.service_config_disable_resolution"=>1 }, Hash, nil)
            config_attr :interceptors, nil, Array, nil
            config_attr :timeout,      nil, Numeric, nil
            config_attr :metadata,     nil, Hash, nil
            config_attr :retry_policy, nil, Hash, Proc, nil

            # @private
            def initialize parent_config = nil
              @parent_config = parent_config unless parent_config.nil?

              yield self if block_given?
            end

            ##
            # Configurations for individual RPCs
            # @return [Rpcs]
            #
            def rpcs
              @rpcs ||= begin
                parent_rpcs = nil
                parent_rpcs = @parent_config.rpcs if @parent_config&.respond_to? :rpcs
                Rpcs.new parent_rpcs
              end
            end

            ##
            # Configuration RPC class for the RewardRecommendation API.
            #
            # Includes fields providing the configuration for each RPC in this service.
            # Each configuration object is of type `Gapic::Config::Method` and includes
            # the following configuration fields:
            #
            #  *  `timeout` (*type:* `Numeric`) - The call timeout in milliseconds
            #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
            #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
            #     include the following keys:
            #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #         trigger a retry.
            #
            class Rpcs
              ##
              # RPC-specific configuration for `get_recommendation`
              # @return [Gapic::Config::Method]
              #
              attr_reader :get_recommendation

              # @private
              def initialize parent_rpcs = nil
                get_recommendation_config = parent_rpcs&.get_recommendation if parent_rpcs&.respond_to? :get_recommendation
                @get_recommendation = Gapic::Config::Method.new get_recommendation_config

                yield self if block_given?
              end
            end
          end
        end
      end
    end
  end
end

# rubocop:disable Lint/HandleExceptions

# Once client is loaded, load helpers.rb if it exists.
begin
  require "perxtech/ml/v1beta1/reward_recommendation/helpers"
rescue LoadError
end

# rubocop:enable Lint/HandleExceptions
